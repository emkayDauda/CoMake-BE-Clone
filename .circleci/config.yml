# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_env:
    steps:
      - run:
          name: "Destroy stack"
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

defaults: &docker
  docker:
      - image: circleci/node:13.8.0

orbs:
  aws-cli: circleci/aws-cli@2.0.3

jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - save_cache:
          paths:
            - /node_modules
          key: "npm-packages"
      # - run: npm run lint
  test:
    <<: *docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - "npm-packages"
      - run: npm i
      - run: npm run test
  
  analyze:
    <<: *docker
    steps:
      - run: npm audit
  
  create_infra:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
      - run: 
          name: file touch
          command: |
              aws ec2 describe-instances \
              --filter Name="tag:Name",Values="Ansible-Test" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
      - run:
          name: check file edited
          command: cat inventory
  
  configure_infra:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4f:e8:df:36:f0:c7:fc:f3:33:a3:bc:73:e6:08:5e:87"]
      - run:
          name: "Install ansible"
          command: apk add --update ansible
      - run:
          name: "Run Playbook and configure server"
          command: ansible-playbook -i inventory main.yml
  
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run: 
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
  
  simulate_fail:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: |
          return 1
      - destroy_env

  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file last-exercise/bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
        

  

workflows:
  build-workflow:
    jobs:
      # - build
      # - test:
      #     requires:
      #       - build
      - create_infra
      - configure_infra:
          requires:
            - create_infra
      - smoke_test:
          requires:
            - configure_infra
      - simulate_fail:
          requires:
            - smoke_test
      - create_and_deploy_front_end:
          requires:
            - create_infra
